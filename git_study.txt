#安装git后，配置仓库
git config --global user.name "Charlson"                        #配置全局用户名
git config --global user.email "ccreed112233@126.com"           #配置全局邮箱
git config --get user.name                                      #查询用户名
git config --get user.email                                     #查询邮箱

#https://github.com/ccreed2018/study_note.git
#git@github.com:ccreed2018/study_note.git
#Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)  即：工作区>>>>暂存区>>>>仓库

#git 操作基本命令
git init                                                        #初始化
git restore <file>                                              #撤销工作区修改的内容
git add                                                         #把工作区修改记录到暂存区 
git restore --staged <file>                                     #撤销暂存区的修改记录
git commit -m "comment"                                         #把暂存区的修改提交到仓库  
git reset --hard HEAD~n/HEAD^                                   #回滚版本库和工作区的修改内容
git log <--pretty=oneline>                                      #获取版本库中历史版本记录
git reflog                                                      #获取版本库中的命令提交记录
git reset --hard commit_id                                      #根据提交的commmit id回滚版本库和工作区
git status                                                      #查看工作区和暂存区状态
git diff                                                        #查看工作区和暂存区差异
git diff --cached                                               #查看暂存区和仓库差异，
git diff HEAD                                                   #查看工作区和仓库的差异
git rm <file>                                                   #从暂存区删除文件


#创建SSH Key：
ssh-keygen -t rsa -C "297517160@qq.com"   
cd ~/.ssh
ls -l   # id_rsa  id_rsa.pub, 将id_rsa.pub的内容配置到github中

#关联远程仓库与本地仓库
git remote add origin git@github.com:ccreed2018/study_note.git  #关联一个远程仓库
git push -u origin master                                       #第一次推送master分支的所有内容
git push origin master                                          #非第一次推送本地提交的修改
git clone git@github.com:ccreed2018/financial_account.git       #从远程仓库克隆到本地
git remote/git remote -v                                        #查看远程库的信息
git checkout -b dev origin/dev                                  #创建与远程分支关联的本地分支，并切换到dev分支
git branch --set-upstream-to=origin/dev dev                     #设置本地分支dev和远程分支origin/dev的链接
git pull                                                        #从远程分支复制到本地分支

#分支管理
git switch -c dev/git checkout -b dev                           #创建并切换分支dev
git branch                                                      #查看分支
git branch dev                                                  #创建分支dev
git switch/checkout dev                                         #切换到已有分支dev
git merge dev                                                   #合并分支dev到当前分支, "快进模式":直接把master指向dev的当前提交
git merge --no-ff -m "merge with no-ff" dev                     #合并分支dev到当前分支，禁用“Fast forward”模式，-m为commit描述
git branch -d dev                                               #删除分支dev

#bug修复时本地手头工作保存与修复
git stash                                                       #保存当前分支未提交的修改，让工作区保持干净
git switch -c issue-101                                         #创建并切换到临时bug分支
git stash list                                                  #查看当前分支保存的未提交修改，以便恢复之前保存的工作区改动
git stash apply stash@{0}                                       #恢复指定的stash内容到工作区
git stash drop                                                  #删除stash
git stash pop                                                   #恢复stash到工作区，并删除stash
git cherry-pick <commit>                                        #把其他分支上的修改commit 4c805e2复制到当前分支，避免重复劳动

#打标签
git tag <tagname>                                               #当前分支上打一个新标签
git tag <tagname> <commit>                                      #针对某次commit打标签  可以用-a指定标签名，-m指定说明文字
git tag                                                         #查看所有标签 PS:标签不是按时间顺序列出，而是按字母排序的
git show <tagname>                                              #查看标签信息
git tag -d <tagname>                                            #删除本地标签
git push origin :refs/tags/v0.9                                 #删除本地标签后，执行此命令才能删远程标签
git push origin <tagname>                                       #推送某个标签到远程
git push origin --tags                                          #推送全部标签到远程


#多人协作工作模式
1.首先，可以试图用git push origin <branch-name>推送自己的修改；
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to=origin/<branch-name>  <branch-name>

#别名
git config --global alias.st status
git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
每个仓库的Git配置文件都放在.git/config文件中，当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中




